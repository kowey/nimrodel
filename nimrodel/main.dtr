%   File:       main.dtr
%   Purpose:    A 'main' application stub for the nimrodel pipeline
%   Author:     Roger Evans
%   Version:    1.0
%   Date:       18/08/12
%
%   (c) Copyright 2012, University of Brighton

app.MAIN:
	<> == nimrodel.MAIN
.


%% nimrodel.MAIN is an application stub for the nimrodel example lexicon.

#vars $output-format: brat dump json raw.
#uses System Implode Idem.


#hide nimrodel.MAIN.
nimrodel.MAIN:
	<> == nimrodel.QUERY-TOP
	
	<version> == elf.GET-CONTEXT:<version display>
	<params> == elf.GET-CONTEXT:<params display>
	<appname> == elf.GET-CONTEXT:<version appname>

	<nl> == '\n'
	
	<help> == <nl>
			'Usage:' <nl>
			'    ' <appname> ' string [-model <model>] [-language <lang>] [-title <title>] [<doc>]' <nl>
			'        Process document from standard input or string argument <doc>.' <nl>
			'        <model> is processing model, <lang> is the document language,'  <nl>
			'        <title> is document title string (if omitted, use document first line)' <nl>
			'        Default model and language can be set in ./' <appname> '-params.dtr file.'<nl>
			<nl>
			'    ' <appname> ' dir [-model <model>] [-language <lang>] <input-dir> <output-dir> ' <nl>
			'        Process files nested in the input directory (arbitrary depth), and'<nl>
			'        results to equivalent path in the output dir'<nl>
			<nl>
			'    ' <appname> ' parallel-dir <jobs> <input-dir> <output-dir>'<nl>
			'        Like dir, but assume input-dir is divided into subdirectories, and process '<nl>
			'        process them in parallel. (Linux/Mac only, needs GNU parallel)'<nl>
			<nl>
			'    ' <appname> ' selftest'<nl>
			'        Run a self unit test suite'<nl>
			<nl>
			'    ' <appname> ' -version         print system version' <nl>
			'    ' <appname> ' -help            print this message' <nl>
	<header> == <nl> <version> <nl>
	
	<elf display> == <header> <help>

	% check for special args first
	<arglist> == System:<writecompact <arglist1> .>
	<arglist -help> == System:<writecompact <help> .>
	<arglist -version> == System:<writecompact <version> <nl>.>
	
	% check for presence and validity of -model arg
	<arglist1> == <arglist1 -model elf.GET-CONTEXT:<params default model .> >
	<arglist1 -model $$model> == <arglist2 <modelcheck $$model .> $$model>
	
	% check for presence and validity of -lang arg
	<arglist2 no $$model> == 'Unknown model: ' $$model <nl>
	<arglist2 yes $$model> == <arglist2 yes $$model -language elf.GET-CONTEXT:<params default language .> >
	<arglist2 yes $$model -language $$language> == <arglist3 <langcheck $$language .> $$model $$language>
	
	% check for presence of -title arg
	<arglist3 no $$model $$language> == 'Unknown language: ' $$language <nl>
	<arglist3 yes $$model $$language> == <arglist3 yes $$model $$language -title check >
	<arglist3 yes $$model $$language -title $$title> == <arglist4 $$model $$language $$title>

	% extract the document, and process it with all the args
	<arglist4 $$model $$language $$title> == <arglist4 $$model $$language $$title -format json>
	<arglist4 $$model $$language $$title -format $output-format> == <process $$model $$language $output-format <docstring $$title> .>
	
	% check model is a known model (ie matches $model, rather than just $$model)
	<modelcheck> == no
	<modelcheck $model> == yes
	
	% check language is a known language (ie matches $elf-language)
	<langcheck> == no
	<langcheck $elf-language> == yes
	
	% get document as a string - from last argument if supplied, otherwise from standard input
	% returns combined doc string, title, doc
	<docstring> == <docstring2>
	<docstring no> == <docstring4>
	<docstring check> == <docstring4-check>
	
	% title supplied in arglist - get doc and glue together
	<docstring2 $$title> == <docstring3 $$title System:<readinput .> .>
	<docstring2 $$title $$any> == <docstring3 $$title $$any .>
	
	% glue together title and doc for combined string
	<docstring3 $$title $$doc> == Implode:<$$title <nl> $$doc> $$title $$doc
	
	% no title supplied - get from first line of std input or use default
	<docstring4> == <docstring5 System:<readinput .> .>
	<docstring4 $$any> == <docstring3 elf.GET-CONTEXT:<params default title .> $$any .>
	<docstring4-check $$any> ==
		<docstring-check-for-date $$any .>

	% split document read from input into first line (title) and rest (document)
	<docstring5 $$doc> == $$doc System:<firstline $$doc .> System:<skipfirstline $$doc .>

	% split document read from input into first line (title) and rest (document)
	% provided that first line looks like a datestamp to us
	<docstring-check-for-date $$doc> ==
		<docstring-check-for-date2 System:<firstline $$doc .> $$doc .>
	<docstring-check-for-date2 $$stamp $$doc> ==
		<docstring-check-for-date3 ISODATE:<is-date $$stamp .> $$stamp $$doc .>
	<docstring-check-for-date3 true $$stamp $$doc> ==
		<docstring3 $$stamp System:<skipfirstline $$doc .> .>
	<docstring-check-for-date3 false $$any $$doc> ==
		<docstring3 elf.GET-CONTEXT:<params default date .> $$doc .>

	% process - intialise nimrodel then pass it the args to process
	<process $$model $$language $output-format> == <nimrodel init $output-format .> <nimrodel process $$model $$language $output-format>
	
	<nimrodel> == nimrodel.NIMRODEL:<> 
.

