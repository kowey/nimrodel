% json:record converts an even length list of the form k2 v1 k2 v2 k3 v3...
% into a json record {"k1":"v1", ...}
%
% At the moment there isn't any sanity checking or escaping; use at your
% own risk

#vars $eq: '=' '=='.

% error checking
json.ERROR:
	<sp> == ' '

	% check that we have an even number of items, returning either
	% ok or fail and the last token
	<check-even $$x $$y $$z> == <check-even $$z>
	<check-even $$x $$y> == <check-even>
	<check-even $$z> == fail <error-msg 'uneven list, no entry after ' $$z>
	<check-even> == ok

	% first argument is a continuation (simple path prefix)
	% second argument is an error status
	% rest of the arguments are passed on to the continuation if ok
	<hopefully $$next ok> == "<$$next>"
	<hopefully $$next fail $$msg> == $$msg

	<msg> == Implode:<<unwords>.>
	<error-msg> == <msg 'ERROR:'>
	<unwords $any> == $any <sp> <unwords>
	<unwords> ==
.

% remove duplicate attributes
json.UNIQUE:
	% delete duplicate keys in a list of feature value pairs
	% assuming their values match, runs in n^2 time
	<unique>  == <hopefully unique2 <check-even>>
	<unique2> == <hopefully unique3 <check-no-dupes>>
	<unique3> == <checked>
	
	% actually delete the duplicates
	<checked $$key $$val> == $$key $$val <checked <delete-key $$key> .>
	<checked> ==

	% ok if there are no duplicate keys in the list with mismatched values
	<check-no-dupes $$key $$val> ==
		<hopefully2 check-no-dupes
			<check-same-key-val $$key $$val>
			<delete-key $$key>
		.>
	<check-no-dupes> == ok

	% delete all instances of the given key
	<delete-key $$key $$key $$any> == <delete-key $$key>
	<delete-key> == <delete-key2>
	<delete-key2 $$key $$key2 $$val2> == $$key2 $$val2 <delete-key $$key>
	<delete-key2> ==

	% ok if the given key is always associated with the same value
	% assumes an even length input list
	% case 1: same key, same value (ok)
	<check-same-key-val $$key $$val $$key $$val> ==
		<check-same-key-val $$key $$val>
	<check-same-key-val> == <check-same-key-val2>
	% case 2: same key, different value (fail)
	<check-same-key-val2 $$key $$val1 $$key $$val2> ==
		fail <error-msg 'value mismatch for' $$key ':' $$val1 'vs' $$val2 .>
	<check-same-key-val2> == <check-same-key-val3>
	% case 3: different keys (ok)
	<check-same-key-val3 $$key $$val $$key2 $$val2> ==
		<check-same-key-val $$key $$val>
	<check-same-key-val3> == ok

	<msg> == json.ERROR:<msg>
	<error-msg> == json.ERROR:<error-msg>
	<check-even> == json.ERROR:<check-even>

	% basically same as in json.ERROR
	% but avoids path interpretation confusion; we only want paths
	% restricted to this sentence when calling hopefully
	<hopefully $$next ok> == <$$next>
	<hopefully $$next fail $$msg> == $$msg

	% like hopefully but also returns fail on fail
	% works on the basis of $$next next also returning ok/fail
	<hopefully2 $$next ok> == <$$next>
	<hopefully2 $$next fail $$msg> == fail $$msg
.


json.STRUCT:
	<sp> == ' '
	<nl> == '\n'
	<nl-comma> == '\n, '

	<quote $any> == '"' $any '"'
	<attr $$key $$val> == <quote $$key .> ':' <quote $$val .>

	<bracket $$left $$right> == $$left LocalPath:<> $$right

	% put a token between every other tokeen
	<intersperse $$sep $$x1 $$x2> == $$x1 $$sep <intersperse $$sep $$x2>
	<intersperse $$sep> == <intersperse-end $$sep>
	<intersperse-end $$sep $$x1> == $$x1
	<intersperse-end> ==

	<record> == <hopefully record-checked <check-even>>
	<record-checked> == Implode:<
		<bracket Implode:<{<nl> .>
			 Implode:<<nl> } .>
			 <record-helper> .> .>
	
	<record-helper $$key $$val $$key2> ==
		<sp> <attr $$key $$val .> , <nl>
		<record-helper $$key2>
	<record-helper $$key $$val> ==
		<sp> <attr $$key $$val .>
	<record-helper> ==

	% render a list of json strings (ie. each token here is assumed to be
	% some arbitrary json)
	<list> == Implode:< [ <intersperse ,> ] .>
	% functionally the same as list but meant for use in longer outputs
	<long-list> == Implode:< [ <sp.> <intersperse <nl-comma .> > <sp> ] .>

	<check-even> == json.ERROR:<check-even>

	% basically same as in json.ERROR
	% but avoids path interpretation confusion; we only want paths
	% restricted to this sentence when calling hopefully
	<hopefully $$next ok> == <$$next>
	<hopefully $$next fail $$msg> == $$msg
.

JSON:
	<mk> == json.STRUCT:<>
	<unique> == json.UNIQUE:<unique>
.
