
#uses Implode Hyphenate.

% firstname support - see also list of firstnames in words/firstname.dtr

nimrodel.firstname.FIRSTNAME-LOOKUP:
	<> == elf.TOP
	<lookup $$name> == <try male nimrodel.firstname.IS-FIRSTNAME-MALE:<$$name> $$name>
	
	<try male $$node $$name> == < IF:< $$node THEN case found $$node 
								  ELSE try female nimrodel.firstname.IS-FIRSTNAME-FEMALE:<$$name> .> $$name >
	<try female $$node> == < IF:< $$node THEN case found $$node ELSE case default .> >
	
	<case found $$node> == $$node
	<case default> == **fail**
.


nimrodel.firstname.FIRSTNAMEROOT:	
	<> == nimrodel.LEXROOT:<>
	
	<token type> == firstname
	<token gender> == unknown
	<lex type> == 'Person'
	<lex cat> == propn
	% nimrodel additions
	<lex forename> == <here token word>
	<lex number> == sing
.

% token types that can appear as surnames
#vars $surname-type: surname propnoun firstname 'Occupation'.


% try various patterns that follow a firstname to build a lexical person phrase
nimrodel.firstname.TRYFIRSTNAME:	
	<> == nimrodel.LEX-TOP
	<[ $$n ]> == nimrodel.phraseutils.PHRASEROOT:<[ $$n ]>
	
	<[ $$n ] lex> == <[ $$n ] switch 3 lex>
	<[ $$n ] token context> == token word+type
	
	% map is a list of 3 word/type pairs for next three words
	<[ $$n ] map de $$t1 $$s2> == phr-case article de 2 $$s2 
	<[ $$n ] map of $$t1 $$s2 placename> == phr-case article of 2 $$s2 
	<[ $$n ] map of $$t1 $$s2 propnoun> == phr-case article of 2 $$s2 
	<[ $$n ] map the $$t1 $$s2 'Occupation'> == phr-case article the 2 $$s2
	<[ $$n ] map le $$t1 $$s2> == phr-case article le 2 $$s2
	<[ $$n ] map la $$t1 $$s2> == phr-case article la 2 $$s2
	<[ $$n ] map $$s1 $surname-type de $$t2 $$s3> == phr-case article de 3 $$s3 $$s1
	<[ $$n ] map $$s1 $surname-type of $$t2 $$s3 placename> == phr-case article of 3 $$s3 $$s1
	<[ $$n ] map $$s1 $surname-type of $$t2 $$s3 propnoun> == phr-case article of 3 $$s3 $$s1
	<[ $$n ] map $$s1 $surname-type> == phr-case surname $$s1
	<[ $$n ] map> == phr-case <here phr-default firstname .> 
	
		
	<[ $$n ] phr-case article $$a 2 $$s lex article> == $$a
	<[ $$n ] phr-case article de 2 $$s lex provenance> == $$s
	<[ $$n ] phr-case article of 2 $$s lex provenance> == $$s
	<[ $$n ] phr-case article $$a 2 $$s> == <[ $$n ] phr-case skip 2 lex> 
	<[ $$n ] phr-case article $$a 3 $$s $$s2 lex article> == $$a
	<[ $$n ] phr-case article de 3 $$s $$s2 lex provenance> == $$s
	<[ $$n ] phr-case article of 3 $$s $$s2 lex provenance> == $$s
	<[ $$n ] phr-case article de 3 $$s $$s2 lex surname> == $$s2
	<[ $$n ] phr-case article of 3 $$s $$s2 lex surname> == $$s2
	<[ $$n ] phr-case article $$a 3 $$s $$s2> == <[ $$n ] phr-case skip 3 lex> 
	
	<[ $$n ] phr-case surname $$s lex surname> == $$s 
	<[ $$n ] phr-case surname $$s> == <[ $$n ] phr-case skip 1 lex> 

	<[ $$n ] phr-default> == match
.


nimrodel.firstname.FEMALEFIRSTNAMEROOT:
	<> == nimrodel.firstname.TRYFIRSTNAME:<[ 'nimrodel.firstname.FIRSTNAMEROOT' ]>
	<token gender> == female
.


nimrodel.firstname.MALEFIRSTNAMEROOT:
	<> == nimrodel.firstname.TRYFIRSTNAME:<[ 'nimrodel.firstname.FIRSTNAMEROOT' ]>
	<token gender> == male
.

% Abbreviations don't do smart name handling for now
nimrodel.firstname.ABBRFIRSTNAMEROOT:
	<> == nimrodel.LEXROOT
	<[ $$n ]> == nimrodel.firstname.FIRSTNAMEROOT:<>
	<[ $$n ] lex nextrole> == <here token nextn Add:<$$n 1 .> lex nextrole .>
	<[ $$n ] lex end-char> == <here token nextn Add:<$$n 1 .> lex end-char .>
.

nimrodel.firstname.ABBRFIRSTNAME:
	<[ > == nimrodel.firstname.ABBRFIRSTNAMEROOT:<[>
	<> == <[ 0 ]>
.

