


nimrodel.title.TITLE-LOOKUP:
	<> == **fail**
	%<$nimrodel-titleword> == 'nimrodel.title.TITLE'
.


nimrodel.title.TITLEROOT:
	<> == nimrodel.LEXROOT
	% core properties of title words
	<token type> == title
	<token pos> == title
	<token gender> == unknown
	
	<lex title> == <here token norm .>
	<lex number> == sing
.

%! 'nimrodel.title.TITLEPHRASEROOT'
%
% Node representing title words with optional lexical name phrase attachment
%	
%   * nimrodel.title.TITLEPHRASEROOT:<FEATURE> = VALUE
%	* nimrodel.title.TITLEPHRASEROOT:<[ SKIP ] FEATURE> = VALUE
%
% *nimrodel.title.TITLEPHRASEROOT* represents a title word, and optionally detects a 
% lexical name phrase starting with the title word, possibly as an abbreviation. 
%
% Its first form just returns properties of the title word itself, without any phrase 
% matching. Its second form has a parameter, _SKIP_, which triggers phrase matching.
% It looks for a lexical phrase of type _Person_ to its right and if found, it
% extends the phrase by attaching the title. _SKIP_ specifies how many tokens to skip 
% before looking for the _Person_ phrase. This is usually 0 (ie look immediately to 
% the right) or 1 (skip one token, typically for tokenised abbreviations such  as 
% 'Dr . Smith').  
%
% @arg FEATURE the feature (sequence of atoms) to evaluate
% @arg VALUE (returned value) the value associated with the feature (sequence of atoms)
% @arg SKIP the number of tokens to skip before looking for 
nimrodel.title.TITLEPHRASEROOT:
	<> == nimrodel.title.TITLEROOT
	
	% title phrase properties default to core properties
	<[ $$n ]> == <>
	
	% lex features we always want to pick up from core properties
	<[ $$n ] lex title> == <lex title>
	<[ $$n ] lex start-char> == <lex start-char>
	
	% lexical phrase detection
	<[ $$n ] lex> == <[ $$n ] try firstname lex>
	
	<[ $$n ] try firstname> == < [ $$n ] IFEQ:< <here token nextn Add:<$$n 1 .> lex type .> 'Person' 
					     THEN case firstname
					     ELSE try propnoun .> >
	<[ $$n ] try propnoun> == < [ $$n ] IFEQ:< <here token nextn Add:<$$n 1 .> token type .> propnoun
					     THEN case firstname
					     ELSE case default .> >
	
	<[ $$n ] case firstname lex> == <here token nextn Add:<$$n 1 .> lex>
	<[ $$n ] case firstname lex output> == <render attr4 lex title <here lex title.> <render extend lex <here token nextn Add:<$$n 1 .> lex output> .> .>	
	<[ $$n ] case firstname> == <>
		
	<[ $$n ] case default> == <>
.

nimrodel.title.TITLE:
	<[ > == nimrodel.title.TITLEPHRASEROOT:<[>
	<> == <[ 0 ]>
.

nimrodel.title.MALETITLE:
	<> == nimrodel.title.TITLE
	<token gender> == male
.

nimrodel.title.FEMALETITLE:
	<> == nimrodel.title.TITLE
	<token gender> == female
.
	
nimrodel.title.ROLETITLEROOT:
	<> == nimrodel.title.TITLEROOT
	<lex type> == 'Person'
	<lex cat> == n
	<$phrase cat> == n
	<phrase-np subcatrel of> == provenance
.
	
nimrodel.title.ROLETITLE:
	<> == nimrodel.title.TITLE
	
	<lex> == <case IFEQ:< <here token prev token pos> det THEN noun ELSE default .> lex> 
	<$phrase> == <case IFEQ:< <here token prev token pos> det THEN noun ELSE default .> $phrase>  
	
	<case noun> == nimrodel.title.ROLETITLEROOT:<>	
	<case default> == nimrodel.title.TITLE:<>
.

nimrodel.title.MALEROLETITLE:
	<> == nimrodel.title.ROLETITLE
	<token gender> == male
.

nimrodel.title.FEMALEROLETITLE:
	<> == nimrodel.title.ROLETITLE
	<token gender> == female
.