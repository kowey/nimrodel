% null output (dump of intermediary semantics)

#uses Add Subtract Gensym Length Implode Explode LocalPath Rest.


app.DUMP:
	<> == elf.TOP
	<sp> == ' '
	<nl> == '\n'
		
	<dump title> == <unwords> <nl>
	<dump sentence $documentString> == <pretty $documentString> <nl>
	
	<unwords $any> == $any <sp> <unwords>
	<unwords> ==
	
	% slight variant of unwords that
	% - inserts indents/breaks on start brackets
	% - annotates spans with the text that goes with them
	<pretty> == <pretty-helper 0>
	
	<pretty-helper $indent $documentString entity **endpoint**> ==
		entity <sp> **endpoint** <sp>
		<pretty-helper $indent $documentString>
	<pretty-helper $indent $documentString entity> ==
		<pretty-helper-entity $indent $documentString>
	<pretty-helper $indent $documentString [> ==
		<nl> <indent $indent> <sp>
		[ <sp>
		<pretty-helper Add:<$indent 1 .> $documentString>
	<pretty-helper $indent $documentString ]> ==
		]
		<pretty-helper Subtract:<$indent 1 .> $documentString>
	<pretty-helper> == <pretty-helper2>
	<pretty-helper2 $indent $documentString $any> ==
		$any <sp>
		<pretty-helper $indent $documentString>
	<pretty-helper2 $indent $documentString> ==
	
	<pretty-helper-entity $indent $documentString $type $start-char $end-char> ==
		entity <sp> $type <sp> $start-char <sp> $end-char <sp>
		( openNLP.GetSpanStrings:<$documentString
			openNLP.NewSpan:<'Person' $start-char $end-char .> .>
		) <sp>
		<pretty-helper $indent $documentString>
	
	% I'm sure there's a better way to express this sort of thing
	<indent 0> ==
	<indent> == <indent2>
	<indent2 $i> == <sp> <indent Subtract:<$i 1 .>>
.
