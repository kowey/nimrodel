% null output (dump of intermediary semantics)

#uses Add Subtract Gensym Length Implode Explode LocalPath Rest.


app.DUMP:
	<> == elf.TOP
	<sp> == ' '
	<nl> == '\n'
		
	<dump title> == <unwords> <nl>
	<dump sentence $documentString> == <pretty <hint $documentString> .> <nl>
	
	<unwords $any> == $any <sp> <unwords>
	<unwords> ==

	% annotate spans with the text that goes with them
	<hint $documentString entity **endpoint**> ==
		entity **endpoint** <hint $documentString>
	<hint $documentString entity> ==
		<hint-entity $documentString>
	<hint> == <hint2>
	<hint2 $documentString $any> ==
		$any <hint $documentString>
	<hint2 $documentString> ==
	
	<hint-entity $documentString $type $start-char $end-char> ==
		entity $type $start-char $end-char
		( openNLP.GetSpanStrings:<$documentString
			openNLP.NewSpan:<'Person' $start-char $end-char .> .>
		)
		<hint $documentString>

	% variant of unwords that uses indentation and line breaks
	% to make input format a bit to understand
	<pretty> == <pretty-helper 0>
	
	<pretty-helper $indent [> ==
		<nl> <indent $indent>
		[ <sp> <pretty-helper Add:<$indent 1 .>>
	<pretty-helper $indent ]> ==
		] <sp> <pretty-helper Subtract:<$indent 1 .>>
	<pretty-helper> == <pretty-helper2>
	<pretty-helper2 $indent $any> ==
		$any <sp> <pretty-helper $indent>
	<pretty-helper2 $indent> ==
	
	% I'm sure there's a better way to express this sort of thing
	<indent 0> ==
	<indent> == <indent2>
	<indent2 $i> == <sp> <indent Subtract:<$i 1 .>>
.
