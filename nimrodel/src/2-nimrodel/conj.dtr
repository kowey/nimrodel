

#hide nimrodel.phrase.TRYCONJUNCT.
nimrodel.phrase.TRYCONJUNCT:
	<> == Local:<>
	
	<$n $phrase> == <try conj $n $phrase>
	
	<try conj $n $c> == < IF:< Local:<$n here lex next $c conj.> THEN try cat ELSE default .> $n $c>
	<try cat $n $c> == < IF:< Local:<$n here lex next $c cat .> THEN case conj ELSE default .> $n $c>
	
	%if conjrel is defined, use it, otherwise return first conjunct as output
	<case conj $n $c output> == <try conjrel Local:<$n here $c conjrel .> $n $c>
	<case conj $n $c end-char> == Local:<$n here lex next lex next $c end-char>
	<case conj $n $c nextrole> == Local:<$n here lex next lex next $c nextrole>
	<case conj> == <default>
	
	<try conjrel unknown $n $c> == Local:< $n $c output> % ignore second conjuct
	<try conjrel> == <case conjrel>
	
	%conjoin this conjunct with second
	<case conjrel $r $n $c> == Local:<$n render rel $c Local:<$n here $c type .> $r Local:<$n here lex next $c output .> .>
	
	<default> == Local:<>
.

#hide nimrodel.phrase.TRYCONJUNCT2.
nimrodel.phrase.TRYCONJUNCT2:
	<> == <not-phrase>
	<$phrase $n $c> == <try conj $phrase $n $c>
	
	<not-phrase> == elf.TOP:<>
	<not-phrase $m $n $c> == Local:<$n $m>
	
	<try conj $p $n $c> == < IF:< Local:<$n here lex next $c next $c conj.> THEN try cat ELSE default .> $p $n $c>
	<try cat $p $n $c> == < IF:< Local:<$n here lex next $c next $c cat .> THEN case conj ELSE default .> $p $n $c>
	
	% if conjrel is defined, use it, otherwise return first conjunct as output
	<case conj $p $n $c output> == <try conjrel Local:<$n here $p conjrel .> $p $n $c>
	<case conj $p $n $c end-char> == Local:<$n here lex next $c next $c end-char>
	<case conj $p $n $c nextrole> == Local:<$n here lex next $c next $c nextrole>
	<case conj> == <default>
	
	<try conjrel unknown $p $n $c> == Local:< $n here lex next $c output> % ignore second conjuct
	<try conjrel> == <case conjrel>
	
	% conjoin this conjunct with second
	<case conjrel $r $p $n $c> == Local:<$n here lex next render conj $p $r
										Local:<$n here lex next $c output .>
										Local:<$n here lex next $c next $c output .> .>
	
	
	<default $p $n $c> == Local:<$n $p>
	<default $p $n $c output> == Local:<$n here lex next $c output Local:<$n here lex next $c type.> >
	<default $p $n $c end-char> == Local:<$n here lex next $c end-char>
	<default $p $n $c nextrole> == Local:<$n here lex next $c nextrole>
.

#hide nimrodel.phrase.CONJ.
nimrodel.phrase.CONJ:
	<> == nimrodel.phrase.PHRASEROOT
	<$typedphrase> == <here lex next $typedphrase>
	<$typedphrase start-char> == nimrodel.phrase.PHRASEROOT
	<$typedphrase conj> == <here lex word>
.
