% utilities for managing context indexing

nimrodel.context.SKIP:
	<> == elf.TOP
	<0 $$m> == 
	<1 $$m> == $$m next
	<2 $$m> == $$m next $$m next
	<3 $$m> == $$m next $$m next $$m next
	<4 $$m> == $$m next $$m next $$m next $$m next
	<5 $$m> == $$m next $$m next $$m next $$m next $$m next
	<6 $$m> == $$m next $$m next $$m next $$m next $$m next $$m next
.

% fully recursive version
nimrodel.context.NEXT:
	<> == <dynamic>
	<here> == nimrodel.LEX-TOP
	<1 $$model $$i> == <here $$model next <here $$model $$i 1> >
	<2 $$model $$i> == <1 $$model $$i> <here $$model next $$model next <here $$model $$i 2> >
	<3 $$model $$i> == <2 $$model $$i> <here $$model next $$model next $$model next <here $$model $$i 3> >
	<4 $$model $$i> == <3 $$model $$i> <here $$model next $$model next $$model next $$model next <here $$model $$i 4> >
	<5 $$model $$i> == <4 $$model $$i> <here $$model next $$model next $$model next $$model next $$model next <here $$model $$i 5> >
	<6 $$model $$i> == <5 $$model $$i> <here $$model next $$model next $$model next $$model next $$model next $$model next <here $$model $$i 6> >

	% more cases use NEXTN version
	<dynamic> == nimrodel.context.NEXTN:<>
.

#uses Add.

% non recursive version
nimrodel.context.NEXTN:
	<> == <dynamic>
	<here> == nimrodel.LEX-TOP
	<1 $$model $$i> == <here $$model next <here $$model $$i 1> >

	<dynamic $$n $$model $$i> == <Add:<$$n -1 .> $$model $$i> <here $$model nextn $$n <here $$model $$i $$n> >
.