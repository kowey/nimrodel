% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
%                                                                           %
% File:            changes                                                  %
% Purpose:         change log for Sussex/Brighton DATR system               %
% Author:          Roger Evans                                              %
%                                                                           %
% Copyright (c) Universities of Sussex and Brighton 1999-2009.
%
% All rights reserved.                                                      %
%                                                                           %
% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %

DATR-2.11
    Final major release of the DATR 2 system, incorporating all changes
    listed below. Looking forward to DATR 3 ...

    2.11.1 24 November 2009
    -- First release of DATR 2.11


DATR-2.10
    2.10.15 04 November 2009
    --  Added namespace syntax for node names as follows:
          + expressions of the form 'a.b.N' are now recognised as a node names
            (where a, b are atoms ie don't start with a captial letter).
          + ends of sentences are identified by '.' followed by whitespace (or
            end-of-file)
          + the symbol '..' is now reserved for future use
        Note that there is no semantics associated with namespace syntax yet -
        that wll come in a futre release.
    --  Added swiprolog customisation
    --  Removed singleton vars from 'uses' library files
    --  Fixed bug in new variable declaration syntax (poplog versions only -
        due to a broken dcg compiler...)
    2.10.14 05 May 2009
    --  significant bug in clause ordering routine in compiler found and
        fixed. Previous versions gave incorrect dumps on example file
        lsystem2.dtr (and others), due to incorrect ordering of clauses for
        a definition like this:
            # vars $x : a b .
            ABrules:
                <|> ==
                <a b> == b <b>
                <$x>  == a <>.
        (the <$x> definition incorrectly took precedence over the <a b>
        definition).
    --  extension to the variable declaration syntax. Previously, because '-'
        was a separator between positive and negative ranges, it was not
        possible to specify '-' as a value in a range. Now you can do this by
        specifying '-' twice consecutively in a range (positive or negative),
        for example:
            # vars $x: a - - b.      % range is a, -, b
            # vars $x: a - - - b.    % range is a, - minus b
            # vars $x: a - b - -.    % range is a minus b, -
        The only case not covered is a negative range consisting of just '-',
        because in three '-' signs, it is always the last one that is
        interpreted as the separator.
    2.10.13 06 October 2006
    --  now supports explicit use of '#us-ascii' declaration to force
        default encoding
    2.10.12 22 April 2006
    --  #show now supports (restricted) variables and iterates through all
        specified values.
    --  new controls over dump actions via 'datr_dump_action/1'.
    2.10.11 13 December 2005
    --  Fixed bug in #atom and #node declarations.
    2.10.10 25 November 2005
    --  Bug fixes to libraries First and Last (were returning non-list
        results which causes mysterious errors in some cases)
    2.10.9 9 September 2005
    --  Changes to make sicstus version work again (previously datr 2.10 only
        worked under poplog prolog)
    2.10.8 16 July 2005
    --  Added hooks db_before_query and db_after_query to support debuggers
    --  POPLOG version only:
        -- modifed #spy behaviour to give a more sensible output for DATR
        -- introduced '#native batch.' to signal when running in batch mode
        -- modified error and warn routines to exit (with non-zero exit
           status) when in batch mode.
    2.10.7 6 July 2005
    --  put back some of the qnode support removed two years ago - the
        Qpath/Qnode libraries need it!
    2.10.6 11 October 2004
    --  minor change to WinDATR packaging - no core changes
    2.10.5 29 October 2003
    --  improved complier a little more, so that generated prolog code can
        do tail recursion optimisation
    --  fixed bugs in handling of 'datr_runtime' clauses when compiling to
        prolog files. NB: '#uses' still does not generate code in prolog
        files, so the #uses commands need to be repeated at load time
    --  changed semantics of #compile - now compiles to file (silently)
    --  changed semantics of #load - if there's a .pl file which is newer than
        the requested file, it is loaded instead.
    2.10.4 13 October 2003
    --  added datr_dump_prefix
    --  improved compiler by adding lots of cuts to body code
    --  improved and bug-fixed libraries (Ascii, Chars, GlobalNode, QueryNode)
    2.10.3 2 July 2003
    --  added support for winDATR installer:
        -   moved batch scripts out of lib/prolog into winDATR bin dir
            (outside main DATR tree), added 'datr.bat'
        -   added '#native memory' to allow DATR to set memory limits
    2.10.2 17 December 2002
    --  added #compile and #dump and made simple_ui use them
    --  added #eof to allow exit from DATR compiler on systems with ctrl D/Z.
    --  added windows batch command lib/poplog/datrdump.bat to load and then
        dump a DATR file (poplog only), and opendatrdump.bat to dump and then
        open using wordpad
    --  added library functions: 'Add', 'Chars', 'Subseq', 'Length'.
    --  Fixed poplog builtin db_name to interpret negative integers.
    --  Repaired bug causing dumps to be in reverse order
    --  Further improved efficiency of declarations:
        -   #node/#atom now handed with 'record' database (approx linear
            lookup)
        -   new custom predicates for determining item type (not used yet!)
        -   #hide etc. now also doesn't suffer from slow compilation problem
        Net result is significant speed-up for compiling larger files with
        lots of declarations in them
    --  Added #native declaration which passes arguments to a native handler
        db_native (defined in builtin file) - currently in poplog allows
        loading of non-datr files via datr files.
    --  removed ancient QNode support
    2.10.1 December 2002 - internal development system
    --  added saved image builder for poplog datr running under win32
    --  added support for compiling and dumping unicode files
        (only poplog prolog, currently),
    --  fixed operator precedence bug in simple_ui, which meant it broke if
        it was ever reloaded

DATR-2.9 GREG release  June 2001
    This version of DATR is distributed with the GREG lexicon framework and
    includes extensions not yet available in any standard DATR distribution.
    The main additions are:

    --  Support for reading DATR code from rtf files, inlcuding font
        information which is transformed into HTML <font> tags within atoms
    --  Addition on the new 'path cut' syntax: <a b c .> occuring on a RHS
        represents the path 'a b c' *without* path extension with the LHS
        tail.
    --  Addition of many of the builtin functions referred to in the DATR
        library RFC document.
    --  Fixed slow compilation problem


DATR-2.8    March 1999
    --  NB: Only tested for poplog and sicstus.
    --  Reorganised files so that the same system can support multiple
        prologs. The main DATR source now lives in subdirectory src, custom
        and builtin files are compiled in situ (rather than being copied
        to top level directory), the top level directory only contains
        loader files for different systems. The currently defined
        loaders are:
            datr.pl -   load datr with default builtin and custom files
            sicstus.pl - load datr with sicstus builtin and default custom files
            poplog.pl - load datr with poplog builtin and default custom files
    --  new file directory.pl defines the location of the DATR system (NEEDS
        TO BE CUSTOMISED ON INSTALLATION)
    --  renamed default.pl vanilla.pl in custom and builtin dirs,
        so that default.pl can be a symbolic link to something more useful
        (ie the actual default file required).
    --  Added datr_custom_banner, defaults to nothing, but can be
        defined via dc_custom_banner in custom file. Invoked by
        datr_banner.
    --  added library file simple_ui.pl containing Gerald's user
        interface support stuff, also added custom/simple_ui.pl that
        loads this library,. and made it the default customisation
    --  added db_put to all builtin files
    --  modifed poplog interface to use poplog.pl and to configure
        directory.pl when it is installed
    --  fixed sicstus inability to access '#uses' files.
DATR-2.7    November 1997
    --  Added UNDEF.pl to useslib. Now the declaration
            #uses UNDEF.
        will ensure that an UNDEF node (that always fails) is present
        (previously, some prologs gave a fatal error if UNDEF wasn't
        defined)
    --  undeclared variables now range over all atoms (previously they
        ranged over none)
    --  ^ is no longer a reserved symbol - it was completely defunct and
        indeed hadn't worked for a while now.
    --  Improved #reset function (now clears out knowledge of nodes
        defined - though not the definitions themselves). Also added API
        functions to access compile-time declarations from prolog:
            datr_api_delete/0   -   #delete
            datr_api_reset/0    -   #reset
            datr_api_nodes/1    -   #node
            datr_api_atoms/1    -   #atom
    --  New declaration #flags allows the setting of arbitrary
        compile-time flags. Currently there is only one such flag '[_]'.
        When set, the compiler interprets [ and ] as nested path
        constructions. By default it is NOT set, so [ and ] are viewed
        as simple atoms. THIS IS A NON-UPWARDLY COMPATIBLE CHANGE, but
        the [ ] notation was a non-standard feature anyway....
    --  new file version.pl defines
            datr_version/2
            datr_version_date/1
            datr_banner_string/1
            datr_banner/0
    --  sicstus customisation now disables warnings about singleton
        variables
    --  DATR now complains if it sees end of file inside a comment or quoted
        atom (previously it just hung).
    --  Updates to the read_me file (though its still pretty useless...)

DATR-2.6    June 1997
    --  Negative range specifier now changed to '-' (A NON-UPWARDLY
        COMPATIBLE CHANGE). However note that '-' is NOT a reserved
        character which means that it must be surrounded by spaces to
        be recognised as the negative range specifier.
    --  Introduction of the #uses declaration. This declaration can
        be followed by a list of node names. Corresponding files are
        sought in the subdirectory useslib and compiled as prolog.
        (eg #uses Foo. results in the file useslib/Foo.pl being
        compiled). They are expected to define (at least) a prolog
        predicate representing the correspondign mdoe definition.

        Currently there are a few useslib definitions (for the new
        semantics of Qnode, Qpath, Query, Gnode, Gpath, Global and
        Local) but these are still provisional - I'm not yet sure the
        semantics of the Q* ones is right.

        The old mechanism for #qnode is still present (but will be
        phased out) and the hacky Qpath is also there, but can be
        overridden with an explicit #uses Qpath. (the semantics of the
        two are completely different...)

DATR-2.5    September 1996
    --  Variable declarations can now take negative range
        specifications, separated from the positive ones by a second
        colon. Also, ranges can include names of other variables. So
        you can now have declarations like:

            #vars $any.          % any atom
            #vars $nearly_any: $any : x.    % any atom except x
            #vars $digit: 0 1 2 3 4 5 6 7 8 9.
            #vars $odd: 1 3 5 7 9.
            #vars $even: $digit : $odd.

        etc.. Note that range lookup now happens at runtime, so when you
        recompile range declarations, you don't have to recompile the
        nodes that access them.

        WARNING: in DATR version 3, the negative range delimiter is
        going to be changed, probably to '-'.

    --  Added Qpath as a complement to #qnode. Qpath is a node which,
        when given ANY path always returns the sequence of attributes
        that made up the original query path. So an expression like:
            Qnode:<Qpath>
        will re-execute the original query (actually it may tack some
        junk on the end of the path too in the usual way - be warned!)
        . Note that UNLIKE Qnode, there is no #qpath declaration
        allowing you to choose the name of the Qpath node - its always
        'Qpath' (yes, its a hack!)

DATR-2.4    January 1995
    Minor bugfix release for SICStus

    --  dynamic declaration of datr_lastchar now correct

    --  Initial definitions of dynamic predicates now asserted rather than
        compiled - so SICStus doesn't get upset

    --  Partial implementation of 'undefined value' feature. If you assert
        prolog clauses for -datr_undefval(X)- then queries returning X will
        be treated by -datr_theorem- as though the had failed (ie they
        won't be printed out in dumps). Note that X is always a list of
        atoms - eg datr_undefval([undef]). Declaration of undef values
        is not yet supported in DATR itself though, but I find this feature
        useful enough that I put it into this release anyway.


DATR-2.3    September 1994

    --  Baseline version for this change log
