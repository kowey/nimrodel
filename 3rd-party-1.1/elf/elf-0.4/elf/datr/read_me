% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
%                                                                           %
% File:            read_me                                                  %
% Purpose:         An Introduction to the Prolog DATR System                %
% Author:          Roger Evans                                              %
%                                                                           %
%      Copyright (c) University of Sussex 1992.  All rights reserved.       %
%                                                                           %
% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %

This directory contains the code for a Prolog implementation of DATR.
This file contains brief introductory notes. For more details on DATR,
and to some extent the system, see
    Evans, R. and G. Gazdar, 1996, ``DATR: a Language for Lexical
    Knowledge Representation,'' Computational Linguistics 22(2), pp.
    167-216.
or visit the DATR web page at
    http://www.datr.org

Comments and queries to Dr. Roger Evans, University of Brighton, Brighton, BN2
4GJ. (email R.P.Evans@brighton.ac.uk).

Copyright (c) Universities of Sussex and Brighton 1997-2009. Permission is
hereby granted for distribution and/or modification for teaching and
research purposes, provided this copyright notice is included. Any use
for commercial or financial gain without written permission is expressly
forbidden.

See the file 'changes' for recent changes to the system.


         CONTENTS

 -- INSTALLATION
 -- LOADING DATR
 -- THE DATR LANGUAGE
 -- COMPILING DATR CODE
 -- QUERYING A DATR DEFINITION
 -- USING THE COMPILER MODES
 -- DEBUGGING
 -- INDEX

-- INSTALLATION --

The DATR system is a self-contained directory tree (see the index at the end
of this document) and can be  located anywhere in your local filesystem.  It
requires, but does not include, a Prolog system. It includes  customisations
for a  range  of prolog  systems,  and  has been  specifically  tested  with
swiprolog,  sicstus  prolog,  and  poplog  prolog.  (Windows  users  may  be
interested in  winDATR, which  is a  completely self-contained  DATR  system
based on this release, but also including (poplog) prolog and packaged  as a
Windows installer.)

The DATR  system needs  to know  where it  is located.  This information  is
stored in the top-level file directory.pl. The default value is specified as
'$DATR/', which means that if you set the environment variable $DATR to  the
DATR root directory, you don't need to do anything else. Alternatively,  you
can edit directory.pl to specify the root directory explicitly.

There are also two optional customisations possible to the system. The first
customisation concerns  files  in  the subdirectory  custom.  These  contain
various customisations and additional features and are loaded selectively by
the loader files.  You may wish  to change these,  or add new  customisation
files. Currently available customisation files include:

vanilla.pl
    This   file   defines   a   number   of   predicates   which   influence
    user-customisable aspects of the system, notably the choice of  keywords
    for declarations, the printing  of error and  warning messages, and  the
    handling of 'foreign' items. The default defines predicates which  fail,
    thereby falling back onto system defaults. However, it would be possible
    to define  customisations which,  for example,  allow all  keywords  and
    messages to  be in  a language  other than English, or  allow  arbitrary
    Prolog terms to be read as foreign items.
simple_ui.pl
    Additional prolog predicates  to provide a  simple interface for  common
    DATR  development  functions.   This  is  loaded   by  default  -   type
    'datr_help.' after loading for additional information.
poplog.pl
    Some optimisations to make the poplog version more efficient.

The second optional customisation concerns poplog systems only.  Using files
in the subdirectory 'poplog' it is possible to integrate DATR fully into the
poplog environment (as a new subsystem, like POP-11, Prolog and LISP).   See
the  file  'poplog/read_me'  for full details.  To integrate DATR fully into
the  poplog  environment  as  described  here,  you  need  the poplog
version 13.6 or later.

-- LOADING DATR --

To load  the DATR  system, start  up  your chosen  prolog system,  and  then
consult the  corresponding  loader file  in  the DATR  top-level  directory.
Loader files  are  included  for swiprolog  (swiprolog.pl),  sicstus  prolog
(sicstus.pl)  and  poplog  prolog  (poplog.pl).  Each  of  these  loads  the
corresponding system-specific file from the builtin directory, and then  the
main DATR  code, plus  optional additional  customisations from  the  custom
directory. The  builtin directory  contains system-specific  files for  some
additional prologs, but these have not been fully tested. If you want to use
one of these  prologs, create  a corresponding  loader file  (eg by  copying
swiprolog.pl) and edit it  to load the right  system-specific file. If  you
want to try an unsupported prolog, create a new file in the builtin  folder,
with customised  versions of  all  the builtin  predicates for  your  target
system, and then create a loader file to call it.


-- THE DATR LANGUAGE --

The language understood by the DATR compiler is essentially the same as that
given in the paper cited above with a number of extensions.  Here is
a brief summary:

Tokenisation:

(a) The symbols : " < > = == ( ) ?  ??  .  are  reserved  symbols  of  the
    language.

(b) By default node names start with  a  capital  letter,  atom  names  with
    anything else.  The default can be overriden with explicit declarations.
    Variables start with a $.  Additionally node names can be prefixed  with
    package    identifiers    separated   by   a   period,    for   example,
    'my.lexicon.Node'. Note that package identiers  start  with  lower  case
    letters.

(c) Arbitrary sequences of characters  enclosed  in  '...'  are  treated  as
    atoms.

(d) Arbitrary sequences of characters enclosed in back quotes are treated as
    'foreign'  terms  -  the  list  of  characters  is  passed  to the user-
    customisable predicate 'dc_custom', which can return any Prolog term  to
    be  treated as an atom.  The default dc_custom fails, causing a compile-
    time error.

(e) Characters can be escaped using \ to override any  special  significance
    they might otherwise have.

(f) % causes the rest of the line to be treated as a comment.

(g) White space  is ignored,  except after a period,  where it signifies the
    end of a sentence, rather than a package identifer.

Syntax:

(a) Atoms, nodes and variables are primitive tokens.

(b) Definitional sentences are:

        Node:   Path1 == Desc11 ... Desc1N
                Path2 == Desc21 ... Desc2N
                     ...
                PathM == DescN1 ... DescMN.

(c) Left-hand-side paths are <atom|var ... atom|var>.

(d) Right hand sides are sequences of descriptors.

(e) Descriptors are atoms, variables, nodes, paths, node/path pairs or
    quoted variants of the same ("Node", "<...>" or "Node:<...>").

(f) Paths within right hand sides are <Desc1 ... DescN> (ie they may
    contain nested descriptor definitions).

(g) Values returned on right hand sides are always flat lists - values
    resulting from embedded descriptors are flattened into the
    surrounding list.

(h) Queries are:

        Node:Path?                  return value for path at node
        Node?                       return values for all 'show' paths
                                    at node
        ?                           return values for all 'show' paths
                                    at all non hidden nodes
        Node: Path = Val.           check value of path at node
        Node: Path = ??.            return value of path at node

    The latter two can be included in otherwise  definitional  sentences  as
    under (b).

(j) Declarations are:

        #node T1 ... Tn.             declare tokens to be Nodes
        #atom T1 ... Tn.             declare tokens to be Atoms
        #show P1 ... Pn.             declare Paths to show in a Node dump
        #hide N1 ... Nn.             declare Nodes to hide in full dump
        #vars V1 ... Vn [: A1 ... Am [ - B1 ... Bn]].
                                     declare Variables (see below)
        #load F1 ... Fn.             load (reconsult) DATR source files
        #reset.                      clear out Node/Atom declarations
        #delete.                     clear out consulted clauses
        #flag F1 ... Fn.             set compiler flags F1...Fn
        #spy N1 ... Nn.              turn on prolog-style spypoints for nodes
        #nospy N1 ... Nn.            turn off spypoints for nodes
        #tracemode [local|global].   set spy output to exclude/include
                                     global path information

Variables:

    Variables range over Atoms occurring in Paths.  They are  identified  by
    having  $  as  their first letter.  They can have a declared range using
    '#vars' as in:

        #vars $a $b $c: 1 2 3.

    which declares three variables $a, $b and $c  all  with  range  1  2  3.
    Separate  #vars  statements  are needed for different ranges.  Variables
    which are not declared range over all Atoms.

    Variable ranges consist of lists of atoms or the names of other variables
    (whose range is  thereby included).  Optionally the range may be followed
    by  a '-' and a second range specification,  of atoms to be excluded from
    the range. Thus:

        #vars $any.     % ranges over all atoms
        #vars $notabc: $any - a b c.  % exclude a b and c from the range

    (Note that the '-' must be delimited by spaces,  and '- -' can be used to
    force the symbol '-' as an atom value.).

    Variables provide a purely syntactic   abbreviation   mechanism.
    For  example,  given  the  above declaration:

        Foo: <$a> == 1.

    is semantically equivalent to:

        Foo: <1> == 1.
        Foo: <2> == 1.
        Foo: <3> == 1.

    Note that

        Foo: <1>  == 2
             <$a> == 1.

    will  probably  not  give  the  desired  effect  -  it  is  in  fact  an
    inconsistent theory.  Note also that any variable mentioned on the right
    hand side of a definition must also occur on the left hand side.


-- COMPILING DATR CODE --

Consulting the file 'load.pl' will cause the compiler  and  runtime  support
system  to  be  loaded  into  your  Prolog  environment.  This will define a
predicate 'datr_compile' which can be used to compile DATR source code  into
Prolog.  Two invocation forms are possible:

    ?- datr_compile(File).
    ?- datr_compile(Infile,Outfile).

The first form is entirely equivalent to the following:

    ?- datr_compile(Infile,reconsult).

which is discussed below.  For the second form, possible values for 'Infile'
are:

(a) Any  argument  acceptable  to  'db_see'   (defined   in   'builtin.pl').
    Generally  'db_see'  is  defined  to  be the builtin predicate 'see', so
    values for 'Infile' include filenames, the words 'user', 'inchan',  etc.
    In  this  case the compiler expects to see ASCII source code in the DATR
    language and compiles it into Prolog.

(b) A list, which is taken to be a list of parse trees as  might  have  been
    produced  by  the parser.  This is intended primarily for compilation of
    DATR code by another piece of code.  Unfortunately, the format of  parse
    trees  remains  to  be documented, but the reader may be able to work it
    out.

In both case the definitional sentences in the DATR input are compiled  into
Prolog  clauses  (see  below for discussion of extensional sentences).  What
happens to them then depends on the value of 'Outfile', which can  take  one
of the following forms:

(a) Any  arguments  acceptable  to  'db_tell'  (defined  in   'builtin.pl').
    Generally  'db_tell'  is  defined to be the builtin predicate 'tell', so
    values for 'Outfile' include filenames, the words 'user', 'outchan' etc.
    In  this  case  the  compiler will read the entire input source and then
    write out the compiled  code  (Prolog  source  code)  to  the  specified
    destination,  along  with  a number of runtime support routines, to make
    the output a free-standing Prolog program.

(b) The word 'reconsult'.  This causes the clauses compiled to be  added  to
    the  Prolog  database in 'reconsult' mode.  That is, any nodes for which
    there are definitional sentences in the file are completely redefined  -
    any  previous  definition in the Prolog database is lost.  However nodes
    not defined in the file are unaffected by a reconsult.

(c) The word 'consult'.  This causes the clauses compiled to be added to the
    Prolog  database  in 'consult' mode.  That is, definitional sentences in
    the file are ADDED to any existing definition in the  database,  without
    destroying  it.  Note however that if a node/path pair is defined by the
    file which is already  defined  in  the  database,  the  new  definition
    overrides the old (the system only allows one definition for a node/path
    pair, the most recent one given, to be active  at  one  time).   Clauses
    added  in consult mode can be later retracted with the '#delete' command
    (see above), at which point the previously  reconsulted  definition  (if
    any) is restored.

(d) The word 'transient'.  This causes the clauses compiled to be  added  to
    the Prolog database in 'transient' mode.  In transient mode, clauses are
    added in the same way as in consult mode.   However,  transient  clauses
    are  deleted  automatically  immediately  after  a query.  This provides
    convenient support for 'node queries' (see below) and debugging.

(e) A Prolog term of the form 'return(C)'.  In this case the list of clauses
    generated  is  unified  with  C.   This  is  intended  primarily for the
    manipulation of the compiled code by another piece of code.

    -- QUERYING A DATR DEFINITION --

    A compiled DATR definition can be accessed  in  two  ways:  by  invoking
    Prolog  predicates  to  execute a query, or by specifying a query to the
    DATR compiler itself.  The first is the most direct interface and is the
    only  interface  available  to  free-standing DATR programs.  The second
    allows the use of DATR syntax and incorporates some  more  sophisticated
    features for complex DATR queries.

    1. Querying with Prolog predicates

    A compiled DATR definition, either compiled  directly  into  the  Prolog
    database  or  compiled  to a file and then loaded as Prolog code, can be
    queried with the primitive predicate 'datr_query' which  is  invoked  as
    follows:

        datr_query(Node,Path,Value).

    Here Node is the name of the node to be queried (a Prolog atom -- if  it
    starts  with  an  upper  case  letter  it  must be quoted) which must be
    instantiated before querying, Path is the path to  be  queried  at  this
    node,  and  must  be  a  (Prolog) list of (Prolog) atoms.  Value will be
    unified with the extensional value (if any) defined  at  this  node/path
    pair.   Values returned by DATR are either (Prolog) atoms, foreign terms
    specified by the user customisation routines, or flat (Prolog) lists  of
    either  of  the above.  The predicate 'datr_query' will fail if no value
    is defined for the node/path pair, or if a value is defined but does not
    unify  with  the  given  value.  DATR is deterministic, so queries never
    backtrack for alternative solutions.

    The  'datr_query'  predicate  is  included  in  the  free-standing  code
    generated  when  you  compile  DATR  to a file.  Some further predicates
    defined  in  the  file  'runtime.pl'  provide  a  range  of   additional
    facilities.   This file is loaded by the main compiler system, but it is
    self contained and so can also be loaded  alone  with  a  compiled  DATR
    program.  The predicates it provides are:

        datr_theorem(Node,Path,Value)
        datr_theorem(Node,Path)
        datr_theorem(Node)
        datr_theorem

    where 'datr_theorem(Node,Path,Value)' is similar to 'datr_query'  above,
    except  that  if  it  succeeds  it  prints the result out in a DATR-like
    syntax; 'datr_theorem(Node,Path)' is just a shorthand for  specifying  a
    variable  for  'Value';  'datr_theorem(Node)'  prints  out the result of
    queries on Node for all the paths specified by '#show' declarations; and
    'datr_theorem'  prints  out  the  result  of  queries  on  all Nodes not
    specified in '#hide' declarations, for all paths  specified  by  '#show'
    declarations.

    2. Querying with DATR itself

    The  DATR  compiler  allows  queries  to  be  interspersed   with   node
    definitions  in  the  input  stream.   This  is  intended  primarily for
    interactive use of DATR,  for  demonstration  or  debugging  of  a  DATR
    theory.  Thus although you can if you wish construct a file with queries
    in it and compile it like any other, the more likely case is  where  you
    set  the  compiler to compile directly from the keyboard input, and type
    queries (and definitions if you wish) directly to it.   On  most  Prolog
    systems,  this can be achieved by specifying 'user' as the input stream.
    Note  that  the  different  compiler  modes  (reconsult,   consult   and
    transient)  only  affect what happens to definitional sentences: queries
    can be specified in any mode.

    Queries specified to the DATR compiler  are  specifed  in  DATR  syntax,
    using  DATR's tokenising conventions described above, and respecting any
    declarations currently in force.  There are two  types  of  query.   The
    most straightforward queries take one of the forms:

        Node:Path?
        Node?
        ?

    Here Node and Path are standard DATR node and path  specifications,  and
    '?'  is  the  sentence  terminator  (instead  of  '.').  The three forms
    correspond directly to the final three forms of 'datr_theorem' described
    above:  the  first  prints the value at Node:Path, the second prints the
    value at Node of all paths specified by '#show', and the third does  the
    same for all nodes not specified by '#hide'.

    More complex queries make use of the syntax for extensional sentences in
    DATR  (those  with  single  =  rather  than  double ==).  An extensional
    sentence occurring in a node description is taken as a query: if it  has
    a  specified  value then the value derivable from the theory must be the
    same, if it is the special value '??', any value  is  acceptable.   Once
    again, if the query succeeds the theorem is printed, otherwise a warning
    message is printed.  The abbreviation mechanism for multiple paths at  a
    node  can  be  used to specify several queries at once, and in this case
    any transient definitional sentences are only retracted  after  ALL  the
    queries  have  been executed.  In addition, extensional and definitional
    sentences may be mixed in a single Node description.  In this  case  the
    definitional sentences are asserted in transient mode before the queries
    are executed, and  then  (being  transient)  they  are  retracted  again
    immediately  after  the query.  For example, suppose we have reconsulted
    the following Node definition:

        Foo: <a> == 1
             <b> == 2.

    and we execute the following query:

        Foo: <a> == <b>
             <a> = ??
             <b> = ??.

    The system will redefine <a> to inherit  from  <b>,  and  so  print  the
    theorems:

        Foo: <a> = 2.
        Foo: <b> = 2.

    However  the  redefinition  of  <a>  will  then  be   withdrawn   (being
    transient), and so a subsequent query of:

        Foo: <a> = ??.

          or, equivalently,

        Foo:<a>?

    will print:

        Foo: <a> = 1.

    -- USING THE COMPILER MODES --

    The three compiler modes have been designed with a particular  style  of
    use  in  mind.   Although you are not, of course, obliged to follow this
    style, it is probably worth describing it briefly.

    The 'reconsult' mode is intended as the basic way  to  load  up  a  DATR
    definition from scratch.  If you reconsult a node definition again it is
    assumed you are no longer interested in the earlier one.  Note also that
    if you reconsult a file containing '#hide' and '#show' declarations more
    than once, the earlier declarations are assumed to be  defunct  and  are
    replaced by the new ones.

    The 'consult' mode is intended for debugging  and  experimentation  (and
    perhaps  also  some  more  esoteric automatic functions like incremental
    learning).   Typically  one  might  add  new   sentences   to   a   node
    interactively  to  overcome  bugs  in  a reconsulted definition, without
    thereby  deleting  the  entire  previous  defintiion   for   the   node.
    Currently,  however, consulted clauses cannot be saved: they can only be
    removed en masse using '#delete' or reconsulting  new  definitions  over
    the  top  of  them.   Otherwise they persist until the end of the Prolog
    session.

    The  'transient'  mode  has  two  main  uses.   Firstly,  for  debugging
    purposes, it can be used to try out definitional sentences and execute a
    query to see what the effect is, without disrupting  the  whole  current
    database.   Secondly,  it  supports  a  style  of querying we call 'node
    querying', whereby a complete new node is created just for  the  purpose
    of  a  query,  and then disappears immediately afterwards.  Consider for
    example  the  fragment  of  an  English  lexicon  given  in   the   file
    'dtr/english.dtr'.   The  leaf  nodes  of  the  hierarchy  tree  in this
    definition  are  lexemes   rather   than   words.    For   example   the
    representation for 'love' is the node:

        Love1:  <> == VERB
                <mor root> == love
                <syn args> == NPCOMP.

    The complete definition encodes the forms of all realisations of  'love'
    ('loves'  'loving'  'loved'  etc.),  but,  since  it stands for a lexeme
    rather than a word, it does not give priority to any one of these forms.
    Words,  by  contrast,  have  particular morphological forms depending on
    their syntactic properties.  To ascertain the particular form of a word,
    one needs to create a specific node for it thus:

        WordX: <> == Love1
               <syn form> == prp.

    This definition simply says that WordX inherits from Love1, except  that
    its  <syn  form>  is  prp  (present  participle).  Love1 itself does not
    define <syn form>.  From this one can derive the theorem:

        WordX: <mor form> = (love ing).

    Similarly WordY might be defined by:

        WordY: <> == Love1
               <syn form> == finite
               <syn tense> == past
               <syn number> == sing
               <syn person> == three.

    from which one can derive:

        WordY: <mor form> == (love s).

    Rather than fill out the lexicon with all these alternatives  explicitly
    enumerated as different nodes, a transient node query can be executed to
    create a particular node on the fly.  Thus the query for  "what  is  the
    morphological form of the present participle of love" might be:

        WordX:  <> == Love1
                <syn form> == prp
                <mor form> = ??.

    Notice here that the node name (WordX) is  irrelevant,  since  the  node
    only  exists  for the duration of the query.  More sophisticated uses of
    transient  mode  might  involve  defining  several  transient  nodes  to
    estabish an appropriate context, and then executing a query.

    -- DEBUGGING --

    There is not much debugging support. The #spy declaration allows you
    to enable a prolog spypoint on the nodes given as arguments. Calls
    to node/paths are printed in a DATR format in the spy messages.
    If #tracemode global is set, the global node/path values are also
    included in the spy output. #nospy turns debugging off for the nodes
    given.

    -- INDEX --

    The system comprises the following files

    CHANGES                 Log of changes to the system
    datr.pl                 Default system loader for unknown prolog systems
    directory.pl            Customisation file to tell DATR where it is located
    load.pl                 Internal system loader file
    poplog.pl               System loader for poplog prolog
    read_me                 This file
    sicstus.pl              System loader for sicstus prolog
    swiprolog.pl            System loader for SWI prolog


    src
        api.pl              predicates defining an api to some of the
                            compiler functions
        builtin.pl          Prolog builtin predicates used by the system
        changes             a log of changes to the system
        custom.pl           user customisation predicates
        dcg.pl              DCG parser for DATR
        debug.pl            debugging support
        declare.pl          handling of declarations
        dynamic.pl          declaration of dynamic predicates
        errors.pl           handling of errors and warnings
        load.pl             system loader file (consult this to load entire system)
        main.pl             compiler main control predicates
        parser.pl           compiled out dcg parser
        path.pl             utilities for handling paths
        read_me             introductory documentation (this file)
        runtime.pl          runtime support predicates
        sentence.pl         sentence reader
        token.pl            tokeniser
        util.pl             utility predicates
        version.pl          predicates identifying system version etc.

    builtin:                subdirectory of builtin predicate customisation files
        arity.pl            Arity Prolog
        cprolog.pl          CProlog
        poplog.pl           POPLOG Prolog
        prolog2.pl          prolog 2
        quintus.pl          Quintus prolog
        sicstus.pl          SICStus Prolog
        vanilla.pl          default (builtins throw an error)

    custom:                 subdirectory for user customisations
        default.pl          default (null customisation)
        poplog.pl           customisation for poplog prolog systems
        simple_ui.pl        simple user interface library loader
        vanilla.pl          null customisation

    lib
        simple_ui.pl        simple user interface library

        poplog:             subdirectory for POPLOG system support routines
            datr.p          POP-11 library interface
            datr.ph         POP-11 header file
            datr.pl         Prolog library interface
            datr_compile.p  POP-11 compiler procedure
            datr_directory.p locating the datr system directory
            datr_subsystem.p subsystem definition for datr
            install_datr    installation script
            mkdatr          make a datr saved images
            mkdatr.bat      make a datr saved images - windows batch file
            read_me         introductory documentation
            rename          filename fix script
            ved_datr.p      '<enter> datr' command for ved


        uses:               subdirectory of library node defs
                        Add.pl
            And.pl
            Ascii.pl
            Chars.pl
            Equal.pl
            Explode.pl
            Fail.pl
            First.pl
            Global.pl
            GlobalNode.pl
            GlobalPath.pl
            Gnode.pl
            Gpath.pl
            Hyphenate.pl
            Idem.pl
            Implode.pl
            Last.pl
            Length.pl
            Local.pl
            LocalPath.pl
            Member.pl
            Not.pl
            Or.pl
            Qnode.pl
            Qpath.pl
            Query.pl
            QueryNode.pl
            QyeryPath.pl
            Rest.pl
            reverse.pl
            Sed.pl
            Suseq.pl
            template.pl
            UNDEF.pl
