%   File:       display.dtr
%   Purpose:    support for displaying answers
%   Author:     Roger Evans
%   Version:    ELF 0.1
%   Date:       26/11/09
%
%   (c) Copyright 2009, University of Brighton

%   -- DISPLAY NODES --

%   These nodes provide output from feature structures in different
%   formats for deubbugging and output purposes.


#uses First Rest Query LocalPath.

%%  elf.DISPLAY       handler for displaying lexical entries

#vars $displayarg: display showall show bracket indent sense-list html prolog
                   prologq lisp.

#hide elf.DISPLAY.
elf.DISPLAY:
    <> == <elf.GET-PARAM:<displaymode>>
    <showall> == elf.display.SHOW:<output all>
    <show> == elf.display.SHOW:<output notfail>
    <bracket> == elf.display.BRACKET:<output>
    <indent> == elf.display.INDENT:<output>
    <html> == elf.display.HTML:<output>
    <prolog> == elf.display.PROLOG:<output>
    <prologq> == elf.display.PROLOGQ:<output>
    <lisp> == elf.display.LISP:<output>
    <sense-list> == elf.display.SENSE-LIST:<.>
.

%%  elf.display.UTILS utility functions for displaying results

#hide elf.display.UTILS.
elf.display.UTILS:
    <lhnode> == QueryNode
    <lhpath> == '<' elf.META LocalPath:<> '>'
    <lhs> == <lhnode> ':' <lhpath>
    <rhs> == Query:<QueryNode elf.META>

    <newline> == '
'
    <space> == ' '
    <space 0> ==
    <space 1> == '  '
    <space 2> == '    '
    <space 3> == '      '
    <space 4> == '        '
    <space 5> == '          '
    <space 6> == '            '
    <space 7> == '              '
    <space 8> == '                '
    <space 9> == '                  '
.

%%  elf.display.SHOW       basic '#show' style dump node - optionally includes failure reports

#hide elf.display.SHOW.
elf.display.SHOW:
    <> == elf.display.UTILS:<>
    <output $type> ==
        <newline>
        <show $type rules.>
        <show $type entry citation value.>
        <show $type entry key value.>
        <show $type entry misc value.>
        <show $type entry gloss value.>

        <show $type entry sign syntax category value.>
        <show $type entry sign syntax case value.>
        <show $type entry sign syntax form value.>
        <show $type entry sign equate semantics.>

        <show $type entry sign syntax subcat type.>
        <show $type entry sign syntax subcat first syntax category value.>
        <show $type entry sign syntax subcat first syntax case value.>
        <show $type entry sign syntax subcat first syntax form value.>
        <show $type entry sign equate syntax subcat first semantics.>

        <show $type entry sign syntax subcat rest type.>
        <show $type entry sign syntax subcat rest first syntax category value.>
        <show $type entry sign syntax subcat rest first syntax case value.>
        <show $type entry sign syntax subcat rest first syntax form value.>
        <show $type entry sign equate syntax subcat rest first semantics.>

        <show $type entry sign syntax subcat rest rest type.>
        <show $type entry sign syntax subcat rest rest first syntax category value.>
        <show $type entry sign syntax subcat rest rest first syntax case value.>
        <show $type entry sign syntax subcat rest rest first syntax form value.>
        <show $type entry sign equate syntax subcat rest rest first semantics.>

        <show $type entry sign syntax subcat rest rest rest type.>
        <show $type entry sign syntax subcat rest rest rest first syntax category value.>
        <show $type entry sign syntax subcat rest rest rest first syntax case value.>
        <show $type entry sign syntax subcat rest rest rest first syntax form value.>
        <show $type entry sign equate syntax subcat rest rest rest first semantics.>

        <show $type entry sign semantics predicate value.>

        <show $type entry sign semantics thematic addressee type.>
        <show $type entry sign semantics thematic agent type.>
        <show $type entry sign semantics thematic agent2 type.>
        <show $type entry sign semantics thematic attribute type.>
        <show $type entry sign semantics thematic attribute2 type.>
        <show $type entry sign semantics thematic behaviour type.>
        <show $type entry sign semantics thematic beneficiary type.>
        <show $type entry sign semantics thematic bodypart type.>
        <show $type entry sign semantics thematic carrier type.>
        <show $type entry sign semantics thematic cause type.>
        <show $type entry sign semantics thematic circumstance type.>
        <show $type entry sign semantics thematic existent type.>
        <show $type entry sign semantics thematic goal type.>
        <show $type entry sign semantics thematic instrument type.>
        <show $type entry sign semantics thematic location type.>
        <show $type entry sign semantics thematic location2 type.>
        <show $type entry sign semantics thematic measure type.>
        <show $type entry sign semantics thematic medium type.>
        <show $type entry sign semantics thematic path type.>
        <show $type entry sign semantics thematic patient type.>
        <show $type entry sign semantics thematic patient2 type.>
        <show $type entry sign semantics thematic phenomenon type.>
        <show $type entry sign semantics thematic phenomenon2 type.>
        <show $type entry sign semantics thematic sayer type.>
        <show $type entry sign semantics thematic sayer2 type.>
        <show $type entry sign semantics thematic saying type.>
        <show $type entry sign semantics thematic saying2 type.>
        <show $type entry sign semantics thematic sensor type.>
        <show $type entry sign semantics thematic source type.>
        <show $type entry sign semantics thematic source2 type.>
        <show $type entry sign semantics thematic target type.>
        <show $type entry sign semantics thematic target2 type.>
        <show $type entry sign semantics thematic token type.>
        <show $type entry sign semantics thematic unknown type.>
        <show $type entry sign semantics thematic value type.>


    <show all> == <lhs> '=' <rhs> <newline>
    <show notfail> == <test <rhs> ! >
    <test **fail** > ==
    <test> == <lhs elf.display.PathTail:<> .> '=' elf.display.PathHead:<> <newline>
.



%%  elf.display.BRACKET       show node as bracketed list

#hide elf.display.BRACKET.
elf.display.BRACKET:
    <> == elf.display.UTILS:<>

    <try $any ':' > == <test $any ':' <rhs> .>
    <try $any '=' > == <test $any '=' <rhs> ! <equate> .>
    <try $any [ ]> ==
    <try> == LocalPath:<> ,

    <test $any $any2 **fail** > ==
    <test> == LocalPath:<> ,
    <test $any '='> == $any '=' elf.display.PathTail:<> elf.display.PathHead:<> ,

    <equate equate> ==
    <equate> == First:<> <equate Rest:<> .>

    <output> ==
        <try entry [
            <try citation ':' entry citation value.>
            <try key ':' entry key value.>
            <try misc ':' entry misc value.>
            <try gloss ':' entry gloss value.>
            <try sign [
                <try syntax [
                    <try category ':' entry sign syntax category value.>
                    <try case ':' entry sign syntax case value.>
                    <try form ':' entry sign syntax form value.>
                    <try subcat [
                        <try first [
                            <try syntax [
                                <try category ':' entry sign syntax subcat first syntax category value.>
                                <try case ':' entry sign syntax subcat first syntax case value.>
                                <try form ':' entry sign syntax subcat first syntax form value.>
                            ] .>
                            <try semantics '=' entry sign equate syntax subcat first semantics .>
                        ] .>
                        <try rest [
                            <try first [
                                <try syntax [
                                    <try category ':' entry sign syntax subcat rest first syntax category value.>
                                    <try case ':' entry sign syntax subcat rest first syntax case value.>
                                    <try form ':' entry sign syntax subcat rest first syntax form value.>
                                ] .>
                                <try semantics '=' entry sign equate syntax subcat rest first semantics.>
                            ] .>
                            <try rest [
                                <try first [
                                    <try syntax [
                                        <try category ':' entry sign syntax subcat rest rest first syntax category value.>
                                        <try case ':' entry sign syntax subcat rest rest first syntax case value.>
                                        <try form ':' entry sign syntax subcat rest rest first syntax form value.>
                                    ] .>
                                    <try semantics '=' entry sign equate syntax subcat rest rest first semantics.>
                                ] .>
                                <try rest [
                                    <try first [
                                        <try syntax [
                                            <try category ':' entry sign syntax subcat rest rest rest first syntax category value.>
                                            <try case ':' entry sign syntax subcat rest rest rest first syntax case value.>
                                            <try form ':' entry sign syntax subcat restrest rest first syntax form value.>
                                        ] .>
                                        <try semantics '=' entry sign equate syntax subcat rest rest rest first semantics.>
                                    ] .>
                                ] .>
                            ] .>
                        ] .>
                    ] .>
                ] .>
                <try semantics [
                    <try predicate ':' entry sign semantics predicate value.>
                    <try thematic [
                        <try addressee [ <try predicate ':' entry sign semantics thematic addressee predicate value.> ] .>
                        <try agent [ <try predicate ':' entry sign semantics thematic agent predicate value.> ] .>
                        <try agent2 [ <try predicate ':' entry sign semantics thematic agent2 predicate value.> ] .>
                        <try attribute [ <try predicate ':' entry sign semantics thematic attribute predicate value.> ] .>
                        <try attribute2 [ <try predicate ':' entry sign semantics thematic attribute2 predicate value.> ] .>
                        <try behaviour [ <try predicate ':' entry sign semantics thematic behaviour predicate value.> ] .>
                        <try beneficiary [ <try predicate ':' entry sign semantics thematic beneficiary predicate value.> ] .>
                        <try bodypart [ <try predicate ':' entry sign semantics thematic bodypart predicate value.> ] .>
                        <try carrier [ <try predicate ':' entry sign semantics thematic carrier predicate value.> ] .>
                        <try cause [ <try predicate ':' entry sign semantics thematic cause predicate value.> ] .>
                        <try circumstance [ <try predicate ':' entry sign semantics thematic circumstance predicate value.> ] .>
                        <try existent [ <try predicate ':' entry sign semantics thematic existent predicate value.> ] .>
                        <try goal [ <try predicate ':' entry sign semantics thematic goal predicate value.> ] .>
                        <try instrument [ <try predicate ':' entry sign semantics thematic instrument predicate value.> ] .>
                        <try location [ <try predicate ':' entry sign semantics thematic location predicate value.> ] .>
                        <try location2 [ <try predicate ':' entry sign semantics thematic location2 predicate value.> ] .>
                        <try measure [ <try predicate ':' entry sign semantics thematic measure predicate value.> ] .>
                        <try medium [ <try predicate ':' entry sign semantics thematic medium predicate value.> ] .>
                        <try path [ <try predicate ':' entry sign semantics thematic path predicate value.> ] .>
                        <try patient [ <try predicate ':' entry sign semantics thematic patient predicate value.> ] .>
                        <try patient2 [ <try predicate ':' entry sign semantics thematic patient2 predicate value.> ] .>
                        <try phenomenon [ <try predicate ':' entry sign semantics thematic phenomenon predicate value.> ] .>
                        <try phenomenon2 [ <try predicate ':' entry sign semantics thematic phenomenon2 predicate value.> ] .>
                        <try sayer [ <try predicate ':' entry sign semantics thematic sayer predicate value.> ] .>
                        <try sayer2 [ <try predicate ':' entry sign semantics thematic sayer2 predicate value.> ] .>
                        <try saying [ <try predicate ':' entry sign semantics thematic saying predicate value.> ] .>
                        <try saying2 [ <try predicate ':' entry sign semantics thematic saying2 predicate value.> ] .>
                        <try sensor [ <try predicate ':' entry sign semantics thematic sensor predicate value.> ] .>
                        <try source [ <try predicate ':' entry sign semantics thematic source predicate value.> ] .>
                        <try source2 [ <try predicate ':' entry sign semantics thematic source2 predicate value.> ] .>
                        <try target [ <try predicate ':' entry sign semantics thematic target predicate value.> ] .>
                        <try target2 [ <try predicate ':' entry sign semantics thematic target2 predicate value.> ] .>
                        <try token [ <try predicate ':' entry sign semantics thematic token predicate value.> ] .>
                        <try unknown [ <try predicate ':' entry sign semantics thematic unknown predicate value.> ] .>
                        <try value [ <try predicate ':' entry sign semantics thematic value predicate value.> ] .>
                    ] .>
                ] .>
            ] .>
        ] .>
.

%%  elf.display.INDENT    show node as indented feature structure

#vars $other: $any - '[' ']' ',' '!'.
#vars $elf-n: 0 1 2 3 4 5 6 7 8 9.
#hide elf.display.INDENT.
elf.display.INDENT:
    <> == elf.display.UTILS:<>
    <$elf-n [> == <INC:<$elf-n> ,>
    <$elf-n ,> == <newline> <space $elf-n> <$elf-n>
    <$elf-n , ] ,> == <DEC:<$elf-n> ,>
    <$elf-n $other> == $other <$elf-n>
    <$elf-n> ==

    <output> == <process elf.display.BRACKET .>
    <process> == <0 , >
.

#hide elf.display.HTML.
elf.display.HTML:
    <> == elf.display.UTILS:<>
    <$elf-n [> == <INC:<$elf-n> ,>
    <$elf-n ,> == <newline> <space $elf-n> <$elf-n>
    <$elf-n , $other ':'> == <newline> <space $elf-n> $other ': ' '<b>' <tocomma '</b>' $elf-n>
    <$elf-n , $other '='> == <newline> <space $elf-n> $other ' = ' '<i>&lt;' <tocomma '></i>' $elf-n>
    <$elf-n , ] ,> == <DEC:<$elf-n> ,>
    <$elf-n $other> == $other <$elf-n>
    <$elf-n> ==

    <tocomma $any $elf-n $other , > == $other $any <$elf-n ,>
    <tocomma $any $elf-n ,> == $any <$elf-n ,>
    <tocomma $any $elf-n $other> == $other ' ' <tocomma $any $elf-n>
    <tocomma $any $elf-n> == $any

    <output> == <process elf.display.BRACKET .>
    <process> == '<pre>' <0 , > '</pre>'
.

#uses Implode Explode.
#hide elf.display.PROLOG.
elf.display.PROLOG:
    <> == elf.display.UTILS:<>

    <tf , **end**> ==
    <tf , ]> == ] ')' <tf>
    <tf $other [ > == $other '(' [ <tf>
    <tf $any ':'> == $any '(' <tv>
    <tf $any '='> == $any '=' [ <tp>
    <tf $any> == $any <tf>
    <tf> ==

    <tv $any ,> == $any ')' <tf ,>
    <tv $other> == $other <tv>

    <tp $other ,> == $other ] <tf ,>
    <tp ,> == ] <tf ,>
    <tp $other> == $other , <tp>

    <output> == <process elf.display.BRACKET .>
    <process> == <tf  LocalPath:<> **end** .>
.

#hide elf.display.PROLOGQ.
elf.display.PROLOGQ:
    <> == elf.display.UTILS:<>

    <tf , **end** > ==
    <tf , ]> == ] ')' <tf>
    <tf $other [ > == $other '(' [ <tf>
    <tf $any ':'> == $any '(' <tv  quote>
    <tf $any '='> == $any '=' [ <tp>
    <tf $any> == $any <tf>
    <tf> ==

    <tv quote $other> == <tv <oq $other .>>
    <tv $any ,> == <cq $any .> ')' <tf ,>
    <tv $other> == $other <tv>

    <tp $other ,> == $other ] <tf ,>
    <tp ,> == ] <tf ,>
    <tp $other> == $other , <tp>

    <oq> == Implode:<\' Explode:<> .>
    <cq> == Implode:<Explode:<> \' .>

    <output> == <process elf.display.BRACKET .>
    <process> == <tf  LocalPath:<> **end** .>
.

#hide elf.display.LISP.
elf.display.LISP:
    <> == elf.display.UTILS:<>
    <tf , ]> == ')' <tf>
    <tf $other [ > == '(' $other  <tf>
    <tf $any ':'> == '(' $any ' ' <tv  quote>
    <tf $any '='> == '(' '=' ' ' $any ' ' '(' <tp>
    <tf $other> == $other ' ' <tf>
    <tf ,> == <tf>
    <tf [> == '(' <tf>
    <tf> ==

    <tv quote $other> == <tv <oq $other .>>
    <tv $any ,> == <cq $any .> ')' <tf ,>
    <tv $other> == $other ' ' <tv>

    <tp $other ,> == $other ')' <tf ,>
    <tp ,> == ')' <tf ,>
    <tp $other> == $other ' ' <tp>

    <oq> == Implode:<\" Explode:<> .>
    <cq> == Implode:<Explode:<> \" .>

    <output> == <process elf.display.BRACKET .>
    <process> == <tf>
.

#hide INC.
INC:
    <0> == 1
    <1> == 2
    <2> == 3
    <3> == 4
    <4> == 5
    <5> == 6
    <6> == 7
    <7> == 8
    <8> == 9
    <9> == 9
.


#hide DEC.
DEC:
    <0> == 0
    <1> == 0
    <2> == 1
    <3> == 2
    <4> == 3
    <5> == 4
    <6> == 5
    <7> == 6
    <8> == 7
    <9> == 8
.


%%  elf.display.PathHead      utility to remove redundant information from paths
%%                  (ie everything after the first '!' - added by
%%                  elf.display.RULE-HANDLER above)

#vars $notcut: $any - ! .
#hide elf.display.PathHead.
elf.display.PathHead:
    <> ==
    <!> ==
    <$notcut> == $notcut <>
.


%%  elf.display.PathTail      utility to remove everything before the first !

#hide elf.display.PathTail.
elf.display.PathTail:
    <$notcut> == <>
    <!> == LocalPath:<>
    <> ==
.


%%  elf.display.PARAMS utility to display current parameter settings

#hide elf.display.PARAMS.
elf.display.PARAMS:
    <> == elf.display.UTILS:<>
    <display> == <newline> 'Parameter settings:' <newline> <newline>
            <show debugging>
            <show displaymode>
            <show undefval>
    <show $any> == '<' $any '> == ' "<$any>" <newline>
.

#hide elf.display.VERSION.
elf.display.VERSION:
    <> == elf.display.UTILS
    <display> == "<package>" <space>
                 version <space>
                 "<major>" \. "<minor>" <space>
                 ( "<date>" )
.


% Nodes to determine the list of senses associated with a lexical entry and return
% them as a comma-separated list, and then to access the head and tail of such a list

#vars $s1 $s2 $s3 $s4: $sense.
#vars $sn9: $sense - 9.
#vars $sn1: $sense - 1.

#hide elf.display.TEST-SENSE.
elf.display.TEST-SENSE:
    <$s1> == <test Query:<QueryNode elf.display.PREFIX:<QueryPath.> $s1 entry type .> .>
    <$s1 $s2> == <test Query:<QueryNode elf.display.PREFIX:<QueryPath.> $s1 $s2 entry type .> .>
    <$s1 $s2 $s3> == <test Query:<QueryNode elf.display.PREFIX:<QueryPath.> $s1 $s2 $s3 entry type .> .>
    <$s1 $s2 $s3 $s4> == no
    <test> == yes
    <test **fail** > == no
.


#hide elf.display.SENSE-LIST.
elf.display.SENSE-LIST:
    <> == <try 1>
    <try $s1> == <try $s1 1>
    <try $s1 $s2> == <try $s1 $s2 1>
    <try $s1 $s2 $s3> == <test $s1 $s2 $s3 elf.display.TEST-SENSE:<$s1 $s2 $s3>>

    <test $s1 $s2 1 no> == <test $s1 $s2 elf.display.TEST-SENSE:<$s1 $s2>>
    <test $s1 $sn9 $sn1 no> == <try $s1 INC:<$sn9>>
    <test $s1 9 $sn1 no> ==
    <test $s1 $s2 $sn9 yes> == $s1 $s2 $sn9 , <try $s1 $s2 INC:<$sn9>>
    <test $s1 $s2 9 yes> == $s1 $s2 9 ,

    <test $s1 1 no> == <test $s1 elf.display.TEST-SENSE:<$s1>>
    <test $sn9 $sn1 no> == <try INC:<$sn9>>
    <test 9 $sn1 no> ==
    <test $s1 $sn9 yes> == $s1 $sn9 , <try $s1 INC:<$sn9>>
    <test $s1 9 yes> == $s1 9 ,

    <test 1 no> == <test elf.display.TEST-SENSE:<>>
    <test $sn1 no> ==
    <test $sn9 yes> == $sn9 , <try INC:<$sn9>>
    <test 9 yes> == 9 ,

    <test no> == <test elf.display.TEST-SENSE:<>>
    <test yes> == ,
.



#vars $notcomma: $any - , .
#hide elf.display.SENSE-HEAD.
elf.display.SENSE-HEAD:
    <> ==
    < , > ==
    <$notcomma> == $notcomma <>
.

#hide elf.display.SENSE-TAIL.
elf.display.SENSE-TAIL:
    < , > == nil
    <$notcomma> == <>
    < , > == LocalPath:<>
.
