%   File:       infrastructure.dtr
%   Purpose:    infrastructure code for the extended lexicon framework
%   Author:     Roger Evans
%   Version:    ELF 0.1
%   Date:       29/03/10
%
%   (c) Copyright 2010, University of Brighton


%   -- INFRASTRUCTURE --
%
%   This file contains the DATR code for the infrastructure nodes of the
%   extended lexicon framework, including the rule application and table
%   lookup mechanisms, and debugging and display utilities.


%   load in standard DATR libraries
#uses
    Local LocalPath
    GlobalNode GlobalPath Global
    UNDEF
    Add First
.

%%  elf.FAIL        Traps all failures and reports if debugging is enabled.

#hide elf.FAIL.
elf.FAIL:
    <> == <fail elf.GET-CONTEXT:<params debugging.> >
    <fail query> == '**Query failed** - ' QueryNode ':<' QueryPath '>'
    <fail full> == <fail query> 
		   '**Global** - ' GlobalNode ':<' GlobalPath '>'
		   '**Local** - ' '<' LocalPath:<> '>'
    <fail brief> == '**fail**'
    <fail off> == UNDEF     		%%real failure
.

%%  elf.TOP         ultimate root node: *everything* inherits from here (except elf.FAIL!).
%%                  Used for infrastructure defaults (not linguistic
%%                  ones) Currently just routes to elf.FAIL
#hide elf.TOP.
elf.TOP:
	<> == elf.FAIL
.

%%  elf.UNDEF       node for undefined paths to inherit from. Used to
%%                  force a path to be undefined, rather than inheriting
%%                  from the definition from a prefix

#hide elf.UNDEF.
elf.UNDEF:
    <> == <undef elf.GET-CONTEXT:<params undefval> .>
    <undef fail> == elf.TOP:<>
    <undef> == First:<>
.

%%  elf.QUERY-TOP	top node for any node that can be queried
%%                  elf expects the path <elf> to be defined
%%                  giving access to contextual information
%%                  and <$elf-role> (which defaults to being undefined)
#hide elf.QUERY-TOP.
elf.QUERY-TOP:
	<> == elf.TOP
	<elf> == elf.CONTEXT:<>
	<$elf-role> == elf.UNDEF
.

%%  elf.SELF        returns (from the global context) the role that
%%                  was used to invoke this lexical entry

#hide elf.SELF.
elf.SELF:
	<> == <getrole GlobalPath .>
	<getrole $elf-role> == $elf-role
	<getrole> == elf.TOP
.

%%  elf.HERE		this nodes implements <here> functionality. ELF
%%                  uses the global state to remember metafeatures
%%                  and ordinary "<...>" would break this. This node
%%                  preserves all the metafeatures and executes the
%%                  specified object path.

#hide elf.HERE.
elf.HERE:
    <> == Global:< GlobalNode elf.META:<GlobalPath .> >
.


%%  elf.LEX-TOP		top node for ELF lexical entries
%%					this node handles language inheritance,
%%					rule application and chaining, and <self> 
%%                  by manipulating the global context. It 
%%                  also provides <here> as a substitute for
%%                  'ordinary' global path inheritance

#hide elf.LEX-TOP.
elf.LEX-TOP:
    <> == elf.TOP
    <$elf-role> == Local:<GlobalNode>
	<$elf-role $elf-port> == <here port $elf-port>
    <$elf-rule> == elf.APPLY-RULE
    <$elf-language> == elf.LANG-TOP
    <rule $elf-rule> == elf.RULE-INPUT:<>
    <self> == Local:<QueryNode elf.SELF>
	<here> == elf.HERE:<>
	<port $elf-port> == <here>
.

%%  elf.APPLY-RULE  this node applies the first rule in the local path
%%                  by invoking <rule $elf-rule> as an object path
%%                  in the current global context

#hide elf.APPLY-RULE.
elf.APPLY-RULE:
    <> == elf.TOP
    <$elf-rule> == Local:<GlobalNode <apply $elf-rule> .>

    <apply $elf-any $elf-rule> == <apply $elf-any rule>
    <apply $elf-any $elf-language> == $elf-language <apply $elf-any>
    <apply $elf-any> == rule $elf-any LocalPath:<>
.


%%  elf.LANG-TOP    this node implements language inheritance
%%                  if <l1 L2 L3 ...> has failed, try <l1 L2 ...>
%%                  and then <l1 ...> and finally <...> in the current
%%                  global context

#vars $elf-l1 $elf-l2: $elf-language.

#hide elf.LANG-TOP.
elf.LANG-TOP:
    <> == elf.TOP
	% don't need to include elf.SELF here, because global context still 'remembers' it
    <$elf-l1> == Local:<GlobalNode <strip $elf-l1> .>

    <strip $elf-l1 $elf-l2> == $elf-l1 <strip $elf-l2>
    <strip $elf-l1> == LocalPath:<>
.

#hide elf.LANG.
elf.LANG:
	<$elf-language> == $elf-language <>
	<$elf-role> == <>
	<$elf-port> == <>
	<> ==
.
	

%%  elf.META        utility to return all the metafeaturs from 
%%                  the beginning of the path. Metafeatures include
%%                  roles, rule-names, languages and user-defined
%%                  features in $elf-meta (eg module names).

#vars $elf-mf: $elf-role $elf-rule $elf-language $elf-meta.

#hide elf.META.
elf.META:
    <$elf-mf> == $elf-mf <>
    <> == 
.

#hide elf.NON-META.
elf.NON-META:
	<$elf-mf> == <>
	<> == LocalPath
.

%%  elf.RULE-INPUT  this node handles rule application failure.
%%                  it fetches the current rule chain from the
%%                  global context, removes the first rule (the
%%                  one that just failed), and runs the remaining
%%                  chain in the global context.

#hide elf.RULE-INPUT.
elf.RULE-INPUT:
    <> == Global:< GlobalNode <input GlobalPath .> >

    <input> == elf.TOP:<>
    <input $elf-rule> == elf.META:<>
.


%%  elf.LEX         this node initiates a new lexical context. It is passed
%%                  a lexical entry specification (a node name, optional role 
%%                  - 0 is used by default, and any additional args, and runs
%%                  in the global context.

#hide elf.LEX.
elf.LEX:
	<> == elf.TOP
	<$elf-any> == <$elf-any 0>
    <$elf-any $elf-role> == Global
.

%%  elf.LEX-LOOKUP  this node initiates a new lexical context from a lexical id. 
%%                  The id is mapped to a lexical entry specification
%%                  by the lookup function (which the application can define 
%%                  via its CONTEXT node) and the result is assumed to be a node name
%%                  and passed to elf.LEX.

#hide elf.LEX-LOOKUP.
elf.LEX-LOOKUP:
    <> == elf.TOP
	<$elf-any> == elf.LEX:<elf.GET-CONTEXT:<lookup id $elf-any .>>
	<$elf-any $elf-role> == elf.LEX:<elf.GET-CONTEXT:<lookup id $elf-any $elf-role.> $elf-role>
.

